//#region Imports Layouts
import { fixedOptions as alternate, createOptions as alternateOptions } from './alternateGallery';
import { fixedOptions as bricks, createOptions as bricksOptions } from './bricksGallery';

import { fixedOptions as collage, createOptions as collageOptions } from './collageGallery';

import { fixedOptions as fullsize, createOptions as fullsizeOptions } from './fullsizeGallery';

import { fixedOptions as column, createOptions as columnOptions } from './columnGallery';

import { fixedOptions as grid, createOptions as gridOptions } from './gridGallery';

import { fixedOptions as masonry, createOptions as masonryOptions } from './masonryGallery';

import { fixedOptions as mix, createOptions as mixOptions } from './mixGallery';

import { fixedOptions as panorama, createOptions as panoramaOptions } from './panoramaGallery';

import { fixedOptions as slider, createOptions as sliderOptions } from './sliderGallery';

import { fixedOptions as slideshow, createOptions as slideshowOptions } from './slideshowGallery';

import { fixedOptions as thumbnails, createOptions as thumbnailsOptions } from './thumbnailsGallery';

import { fixedOptions as empty, createOptions as emptyOptions } from './emptyGallery';
import { createOptions as jsonFixedOptions } from './designedPresetGallery';

import optionsMap from '../helpers/optionsMap';
import { GALLERY_CONSTS } from '../..';

//#endregion Imports

const addPresetOptions = (options) => {
  // new layouts
  const LAYOUTS = GALLERY_CONSTS[optionsMap.layoutParams.structure.galleryLayout];
  switch (options[optionsMap.layoutParams.structure.galleryLayout]) {
    case LAYOUTS.MASONRY:
      return masonryOptions(options);
    case LAYOUTS.GRID:
      return gridOptions(options);
    case LAYOUTS.THUMBNAIL:
      return thumbnailsOptions(options);
    case LAYOUTS.SLIDER:
      return sliderOptions(options);
    case LAYOUTS.SLIDESHOW:
      return slideshowOptions(options);
    case LAYOUTS.PANORAMA:
      return panoramaOptions(options);
    case LAYOUTS.COLUMN:
      return columnOptions(options);
    case LAYOUTS.MAGIC:
      console.error('A layout generated by the magicLayoutSeed is no longer supported as of Pro Gallery v5');
      return options;
    case LAYOUTS.FULLSIZE:
      return fullsizeOptions(options);
    case LAYOUTS.BRICKS:
      return bricksOptions(options);
    case LAYOUTS.MIX:
      return mixOptions(options);
    case LAYOUTS.ALTERNATE:
      return alternateOptions(options);
    case LAYOUTS.EMPTY:
      return emptyOptions(options);
    case LAYOUTS.JSON_FIXED:
      return jsonFixedOptions(options);
    case LAYOUTS.COLLAGE:
    default:
      return collageOptions(options);
  }
};

const NEW_PRESETS = {
  alternate,
  bricks,
  collage,
  fullsize,
  column,
  grid,
  masonry,
  mix,
  panorama,
  slider,
  slideshow,
  thumbnails,
  empty,
};

const getLayoutName = (galleryLayout) => {
  const galleyLayoutList = [
    'empty', // -1
    'collage', // 0
    'masonry', // 1
    'grid', // 2
    'thumbnails', // 3
    'slider', // 4
    'slideshow', // 5
    'panorama', // 6
    'column', // 7
    'magic-deprecated', // 8
    'fullsize', // 9
    'bricks', // 10
    'mix', // 11,
    'alternate', // 12
  ];
  return galleyLayoutList[galleryLayout + 1];
};

// returns true if the given param is in the current layout preset
const isInPreset = (galleryLayout, paramToCheck) => {
  const layoutName = getLayoutName(galleryLayout) || 'empty'; // empty for when there is no layout given
  return Object.keys(NEW_PRESETS[layoutName]).includes(paramToCheck);
};

export { addPresetOptions, NEW_PRESETS, getLayoutName, isInPreset };
